#!/usr/bin/python

DOCUMENTATION = '''
---

module: aci_epg_domain_binding
short_description: Direct access to the APIC API
description:
    - Offers direct access to the APIC API
author: 
requirements:
    - ACI Fabric 1.0(3f)+
    - Cobra SDK
notes:
    - EPG Sould be existing
options:
    action:
        description:
            - http verb, i.e. post or get
        required: true
        default: null
        choices: ['post', 'get']
        aliases: []
    tenant_name:
        description:
            - Tenant Name
        required: true
        default: null
        choices: []
        aliases: []
    application_profile:
        description:
            - Application Profile Name
        required: true
        default: null
        choices: []
        aliases: []
    epg_name:
        description:
            - EPG Name
        required: true
        default: null
        choices: []
        aliases: []
    domain:
        description:
            - Dictates domain to be used
        required: false
        default: phys
        choices: ['phys']
        aliases: []
    domain_profile:
        description:
            - Dictates domain profile to be attached
        required: true
        default: null
        choices: []
        aliases: []
    encap:
        description:
            - Vlan encapsulation
        required: true
        default: null
        choices: []
        aliases: []
    immediacy:
        description:
            - On Demand | Immediate
        required: false
        default: immediate
        choices: []
        aliases: []
    host:
        description:
            - IP Address or hostname of APIC resolvable by Ansible control host
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: true
        default: 'admin'
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: true
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use
        required: false
        default: https
        choices: ['http', 'https']
        aliases: []
'''

EXAMPLES = '''

    aci_epg_domain_binding: 
        action: "{{ action }}"
	tenant_name: "{{ tenant_name }}"
	application_profile: "{{ application_profile }}"
	epg_name: "{{ epg_name }}"
	encap: "{{ encap }}"
	domain: "{{ domain }}"
	domain_profile: "{{ domain_profile }}"
	immediacy: "{{ immediacy }}" 
	host: "{{ inventory_hostname }}"
	username: "{{ user }}"
	password: "{{ pass }}"

'''

import socket
import json
import requests

def main():
    ''' Ansible module to take all the parameter values from the playbook '''
    module = AnsibleModule(
        argument_spec=dict(
            action=dict(choices=['post', 'get']),
            tenant_name=dict(type='str', required=True),
            application_profile=dict(type='str', required=True),
            epg_name=dict(type='str', required=True),
	    domain=dict(choices=['phys'], default='phys'),
	    domain_profile=dict(type='str', required=True),
            encap=dict(type='str', required=True),
            immediacy=dict(choices=['immediate','ondemand'], default='immediate'),
            host=dict(required=True),
            username=dict(type='str', default='admin'),
            password=dict(type='str'),
            protocol=dict(choices=['http', 'https'], default='http')
        ),
        supports_check_mode=False
    )

    tenant_name = module.params['tenant_name']
    application_profile = module.params['application_profile']
    epg_name = module.params['epg_name']
    domain = module.params['domain']
    domain_profile = module.params['domain_profile']
    encap = module.params['encap']
    immediacy = module.params['immediacy']
    username = module.params['username']
    password = module.params['password']
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    action = module.params['action']

    post_uri = '/api/mo/uni/tn-'+tenant_name+'/ap-'+application_profile+'/epg-'+epg_name+'/rsdomAtt-[uni/'+domain+'-'+domain_profile+ '].json'
    get_uri = '/api/node/class/fvRsDomAtt.json'

    ''' Config payload to enable the physical interface '''
    config_data = {
	"fvRsDomAtt": {
		"attributes": {
			"dn": "uni/tn-"+tenant_name+"/ap-"+application_profile+"/epg-"+epg_name+"/rsdomAtt-[uni/"+domain+"-" + domain_profile+"]",
			"encap": "vlan-"+encap+"",
			"instrImedcy": ""+immediacy+"",
		}
	}
	
    }
    payload_data = json.dumps(config_data) 

    ''' authentication || || Throw an error otherwise'''
    apic = "{0}://{1}/".format(protocol, host)

    auth = dict(aaaUser=dict(attributes=dict(name=username, pwd=password)))
    url=apic+'api/aaaLogin.json'

    authenticate = requests.post(url, data=json.dumps(auth), timeout=2, verify=False)

    if authenticate.status_code != 200:
        module.fail_json(msg='could not authenticate to apic', status=authenticate.status_code, response=authenticate.text)

    ''' Sending the request to APIC '''
    if post_uri.startswith('/'):
        post_uri = post_uri[1:]
    post_url = apic + post_uri

    if get_uri.startswith('/'):
        get_uri = get_uri[1:]
    get_url = apic + get_uri

    if action == 'post':
        req = requests.post(post_url, cookies=authenticate.cookies,
                            data=payload_data, verify=False)
    elif action == 'get':
        req = requests.get(get_url, cookies=authenticate.cookies,
                           data=payload_data, verify=False) 
    
    ''' Check response status and parse it for status || Throw an error otherwise '''
    response = req.text
    status = req.status_code

    changed = False
    if req.status_code == 200:
        if action == 'post':
            changed = True
        else:
            changed = False
    else:
        module.fail_json(msg='error issuing api request',
                         response=response, status=status)

    results = {}
    results['status'] = status
    results['response'] = response
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
try:
    main()
except:
    pass
