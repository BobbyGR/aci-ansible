#!/usr/bin/python
'''
Example = 
aci_vmm_domain_dynamic_binding:
           action: "{{ action }}"
           app_profile_name: "{{ app_profile_name }}"
           tenant_name: "{{ tenant_name }}"
           epg_name: "{{ epg_name }}"
           domain_profile: "{{ domain_profile }}"
           deploy_immediacy: "{{ deploy_immediacy }}"
	   resolution_immediacy: "{{ resolution_immediacy }}"
	   netflow: "{{ netflow }}"
           host: "{{ inventory_hostname }}"
           username: "{{ user }}"
           password: "{{ pass }}"
	   protocol: "{{ protocol }}"
	   
'''
import socket
import json
import requests

def main():
    ''' Ansible module to take all the parameter values from the playbook '''
    module = AnsibleModule(
        argument_spec=dict(
            action=dict(choices=['post', 'get']),
            tenant_name=dict(type='str', required=True),
            app_profile_name=dict(type='str', required=True),
            epg_name=dict(type='str', required=True),
	    domain_profile=dict(type='str', required=True),
            deploy_immediacy=dict(choices=['immediate', 'on-demand'], default='on-demand'),
            resolution_immediacy=dict(choices=['immediate','ondemand', 'pre-provision'], default='immediate'),
            netflow=dict(choices=['enabled','disabled'], default='disabled'),
            host=dict(required=True),
            username=dict(type='str', default='admin'),
            password=dict(type='str'),
            protocol=dict(choices=['http', 'https'], default='http')
        ),
        supports_check_mode=False
    )
   

    tenant_name = module.params['tenant_name']
    app_profile_name = module.params['app_profile_name']
    epg_name = module.params['epg_name']
    deploy_immediacy =  module.params['deploy_immediacy']
    if deploy_immediacy == "on-demand":
       deploy_immediacy = 'lazy'
    netflow = module.params['netflow']
    domain_profile = module.params['domain_profile']
    resolution_immediacy = module.params['resolution_immediacy']
    if resolution_immediacy == "on-demand":
       resolution_immediacy = 'lazy'    
    username = module.params['username']
    password = module.params['password']
    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])

    action = module.params['action']

    post_uri = '/api/mo/uni/tn-'+tenant_name+'/ap-'+app_profile_name+'/epg-'+epg_name+'/rsdomAtt-[uni/vmmp-VMware/dom-'+domain_profile+ '].json'
    get_uri = '/api/node/class/fvRsDomAtt.json'

    ''' Config payload to enable the physical interface '''
    config_data = {
	"fvRsDomAtt": {
		"attributes": {
			
			"instrImedcy": deploy_immediacy,
            "resImedcy": resolution_immediacy,
            "netflowPref": netflow
			
		}
	}
	
    }
    payload_data = json.dumps(config_data) 

    ''' authentication || || Throw an error otherwise'''
    apic = "{0}://{1}/".format(protocol, host)

    auth = dict(aaaUser=dict(attributes=dict(name=username, pwd=password)))
    url=apic+'api/aaaLogin.json'

    authenticate = requests.post(url, data=json.dumps(auth), timeout=2, verify=False)

    if authenticate.status_code != 200:
        module.fail_json(msg='could not authenticate to apic', status=authenticate.status_code, response=authenticate.text)

    ''' Sending the request to APIC '''
    if post_uri.startswith('/'):
        post_uri = post_uri[1:]
    post_url = apic + post_uri

    if get_uri.startswith('/'):
        get_uri = get_uri[1:]
    get_url = apic + get_uri

    if action == 'post':
        req = requests.post(post_url, cookies=authenticate.cookies,
                            data=payload_data, verify=False)
    elif action == 'get':
        req = requests.get(get_url, cookies=authenticate.cookies,
                           data=payload_data, verify=False) 
    
    ''' Check response status and parse it for status || Throw an error otherwise '''
    response = req.text
    status = req.status_code

    changed = False
    if req.status_code == 200:
        if action == 'post':
            changed = True
        else:
            changed = False
    else:
        module.fail_json(msg='error issuing api request',
                         response=response, status=status)

    results = {}
    results['status'] = status
    results['response'] = response
    results['changed'] = changed

    module.exit_json(**results)

from ansible.module_utils.basic import *
try:
    main()
except:
    pass

